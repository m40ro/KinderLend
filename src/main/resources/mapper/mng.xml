<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--반드시 세미콜론 생략 -->
<mapper
	namespace="com.tenco.toyproject.repository.interfaces.MngRepository">

	<!-- <insert id ="insert"> insert into user_tb(username,password,fullname,created_at)values(#{username},#{password},#{fullname},now() 
		) </insert> -->
	<!--  
		<select id="findById" resultType = "com.tenco.toyproject.repository.entity.User"> 
		select * from user_tb where id = #{id} </select> <select id="findByUsernameAndPassword" 
		resultType = "com.tenco.toyproject.repository.entity.User"> select * from 
		user_tb where username = #{username} and password = #{password} </select> -->
	<select id="findByRentId">
		select * from rent where id = #{id}
	</select>
	<select id="findRentAllCount">
		select count(*) from rent
	</select>
	<select id="findRentWithUserAll">
		select r.id, u.username, p.id as productId,p.name as productName, r.status, r.start_day, r.end_day,r.created_at from rent r left outer join user u on r.user_id = u.id left outer join product p on r.product_id = p.id LIMIT #{start}, 5
	</select>
	<delete id="deleteById"> delete from user where id = #{id} </delete>
	<update id='updateById'>
		update user set
			email = #{email},
			username = #{userName},
			password = #{password},
			phone_number = #{phoneNumber}
			where id = #{id}
	</update>
	<select id="findById"
		resultType="com.tenco.toyproject.repository.entity.User">
		SELECT * FROM user where id = #{id}
	</select>
	<select id="findAllWithPagination"
		resultType="com.tenco.toyproject.repository.entity.User">
		SELECT * FROM user LIMIT #{start}, 5
	</select>
	<select id="findAllCount" resultType="Integer">
		SELECT count(*) FROM user
	</select>
  
  	<select id="findAllProductWithPagination" resultType="com.tenco.toyproject.repository.entity.Product">
		SELECT p.id, p.first_category_id, p.second_category_id, p.price, p.name, p.pic_url, p.content, p.status, p.created_at, p.grade, fc.first_category_name, sc.second_category_name FROM product AS p
		JOIN first_category AS fc ON fc.id = p.first_category_id
		JOIN second_category AS sc ON sc.id = p.second_category_id
		LIMIT #{start}, 5
	</select>
	<!-- 물품 상세 -->
	<select id="findProductById" resultType="com.tenco.toyproject.repository.entity.Product">
		SELECT p.id, p.first_category_id, p.second_category_id, p.price, p.name, p.pic_url, p.content, p.status, p.created_at, p.grade, fc.first_category_name, sc.second_category_name FROM product AS p
		JOIN first_category AS fc ON fc.id = p.first_category_id
		JOIN second_category AS sc ON sc.id = p.second_category_id 
		WHERE p.id = #{pId}
	</select>
	<!-- 물품 건수 -->
	<select id="findProductCount" resultType="int">
		SELECT count(*) FROM product
	</select>
	<delete id="deleteByProductId">
		DELETE FROM product WHERE id = #{id}
	</delete>

	<!-- first & Second category -->
	<select id="findCategoryAll" resultType="com.tenco.toyproject.repository.entity.FirstCategory">
		SELECT fc.id, fc.first_category_name, sc.id AS second_id, sc.second_category_name
		FROM first_category AS fc
	   	RIGHT JOIN second_category AS sc ON sc.first_category_id = fc.id
	</select>

	<!-- first Category -->
	<select id="findFirstCategoryAll" resultType="com.tenco.toyproject.repository.entity.FirstCategory">
		SELECT * FROM first_category
	</select>

	<!-- first Category Using Second Category Id -->
	<select id="findFirstCategoryByfId" resultType="Integer">
		SELECT first_category_id FROM second_category WHERE id = #{sId}
	</select>

	<!-- Second category -->
	<select id="findSecondCategoryForRent" resultType="com.tenco.toyproject.repository.entity.SecondCategory">
		SELECT * FROM second_category WHERE first_category_id BETWEEN 0 AND 10
	</select>

	<insert id="createProduct">
		INSERT INTO
			product (first_category_id, second_category_id, price, name, pic_url, content, status, grade,created_at)
		VALUES (#{firstCategoryId}, #{secondCategoryId}, #{price}, #{name}, #{picUrl}, #{content}, #{status}, #{grade} ,now())
	</insert>

	<update id="updateProduct">
		UPDATE product SET
			first_category_id = #{firstCategoryId},
			second_category_id = #{secondCategoryId},
			price = #{price},
			name = #{name},
			pic_url = #{picUrl},
			content = #{content},
			status = #{status},
			grade = #{grade}
		WHERE id = #{id}
	</update>
</mapper>